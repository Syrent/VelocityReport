plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.0.1'
}

group = 'ir.syrent.velocityreport'
version = findProperty("version")

repositories {
    mavenLocal()
    mavenCentral()

    // Velocity-API
    maven {
        name 'papermc'
        url 'https://repo.papermc.io/repository/maven-public/'
    }

    // AdventureAPI/MiniMessage
    maven {
        name = "sonatype-oss-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    // SpigotAPI
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        // As of Gradle 5.1, you can limit this to only those
        // dependencies you expect from it
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    // VRuom
    maven {
        url = uri("https://maven.pkg.github.com/mohamad82bz/ruom")
        credentials {
            username = project.findProperty("gpr.user")
            password = project.findProperty("gpr.key")
        }
    }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.1.0'
    compileOnly 'org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT'

    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'net.kyori:adventure-api:4.11.0'
    implementation 'me.mohamad82:ruom-velocity:4.2.10'
    implementation 'com.github.cryptomorin:XSeries:9.1.0'
    implementation 'net.kyori:adventure-platform-bukkit:4.1.2'
    implementation 'net.kyori:adventure-text-minimessage:4.11.0'

    annotationProcessor 'com.velocitypowered:velocity-api:3.1.0'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    minimize()
    relocate('me.mohamad82.ruom', 'ir.syrent.velocityreport.ruom')
    relocate('com.cryptomorin.xseries', 'ir.syrent.velocityreport.xseries')
    relocate('net.kyori.adventure', 'ir.syrent.velocityreport.adventure')
    archiveFileName = findProperty("plugin-name") + " v" + findProperty("version") + ".jar"
}

jar {
    archiveFileName = findProperty("plugin-name") + " v" + findProperty("version") + " " + "unshaded" + ".jar"
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
    options.encoding = 'UTF-8'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = "8"
        freeCompilerArgs += ["-Xjvm-default=all"]
    }
}

compileJava.options.encoding = 'UTF-8'
compileJava.dependsOn clean

build.dependsOn shadowJar

tasks.withType(Jar) {
    destinationDirectory = file("$rootDir/bin/")
}

clean.doLast {
    file("${rootDir}/bin").deleteDir()
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
